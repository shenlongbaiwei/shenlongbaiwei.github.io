<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法（回溯）-n皇后问题</title>
      <link href="/2024/06/21/6-21/"/>
      <url>/2024/06/21/6-21/</url>
      
        <content type="html"><![CDATA[<h1 id="算法（回溯）-n皇后问题"><a href="#算法（回溯）-n皇后问题" class="headerlink" title="算法（回溯）-n皇后问题"></a>算法（回溯）-n皇后问题</h1><blockquote><p>该题主要来自于力扣。算法主要使用了回溯的算法思想，该题的相关代码思路来自于代码随想录的carl哥。</p><p><a href="https://programmercarl.com/0051.N%E7%9A%87%E5%90%8E.html#%E6%80%9D%E8%B7%AF">https://programmercarl.com/0051.N%E7%9A%87%E5%90%8E.html#%E6%80%9D%E8%B7%AF</a></p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode.cn/problems/n-queens/description/">https://leetcode.cn/problems/n-queens/description/</a></p><img src="/2024/06/21/6-21/image-20240621093705811.png" class="" title="题目描述"><h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>该题主要使用了回溯法，而且，n皇后问题要求所有皇后不在同一行，同一列，同一斜线。因此我们把整个棋盘看作一个树。</p><p>在每一层不断循环，往下一行则是模拟树枝向下的过程，逐渐递归。结束该层某个元素之后，就进行回溯。</p><p>相对来说思路比较简单，主要是需要一个验证当前位置是否合法的isvalid函数。</p><h3 id="代码解析："><a href="#代码解析：" class="headerlink" title="代码解析："></a>代码解析：</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class Solution {</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; result;</span><br><span class="line">private:</span><br><span class="line">    void huisu(int n,int row,vector&lt;string&gt;&amp; checkpoint){</span><br><span class="line">        if(n==row){</span><br><span class="line">            result.push_back(checkpoint);</span><br><span class="line">            return;</span><br><span class="line">        }</span><br><span class="line">        for(int i=0;i&lt;n;i++){</span><br><span class="line">            if(isvalid(n,i,row,checkpoint)){//n是总行数列数，i是当前列数，row是当前行数</span><br><span class="line">                checkpoint[row][i]='Q';</span><br><span class="line">                huisu(n,row+1,checkpoint);</span><br><span class="line">                checkpoint[row][i]='.';</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    bool isvalid(int n ,int col ,int row , vector&lt;string&gt; checkpoint){</span><br><span class="line">        for(int i=0;i&lt;row;i++){</span><br><span class="line">            if(checkpoint[i][col]=='Q'){</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        //45度</span><br><span class="line">        for(int i=row-1,j=col-1;i&gt;=0&amp;&amp;j&gt;=0;i--,j--){</span><br><span class="line">            if(checkpoint[i][j]=='Q'){</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        //135度</span><br><span class="line">        for(int i=row-1, j=col+1;i&gt;=0&amp;&amp;j&lt;n;i--,j++){</span><br><span class="line">            if(checkpoint[i][j]=='Q'){</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {</span><br><span class="line">        std::vector&lt;std::string&gt; checkpoint(n,std::string(n,'.'));</span><br><span class="line">        result.clear();</span><br><span class="line">        huisu(n,0,checkpoint);</span><br><span class="line">        return result;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>注意初始化checkpoint的时候，要使用相关stl的构造函数。</p><p>整体上该题思路不是很难。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -回溯算法 -n皇后 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新安排行程（回溯算法）</title>
      <link href="/2024/06/20/6-20/"/>
      <url>/2024/06/20/6-20/</url>
      
        <content type="html"><![CDATA[<h1 id="算法（回溯）-重新安排行程"><a href="#算法（回溯）-重新安排行程" class="headerlink" title="算法（回溯）-重新安排行程"></a>算法（回溯）-重新安排行程</h1><p>本代码及其相关思路来自：<a href="https://programmercarl.com/0332.%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B.html#%E6%80%9D%E8%B7%AF">https://programmercarl.com/0332.%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B.html#%E6%80%9D%E8%B7%AF</a></p><p>即代码随想录的carl哥那里，我主要是进行相关学习，并进行对应总结。</p><p>题目要求：</p><p><a href="https://leetcode.cn/problems/reconstruct-itinerary/description/">https://leetcode.cn/problems/reconstruct-itinerary/description/</a></p><img src="/2024/06/20/6-20/image-20240620090416081.png" class="" title="题目描述"><h3 id="题目解析："><a href="#题目解析：" class="headerlink" title="题目解析："></a>题目解析：</h3><p>首先该题，主要使用了回溯法，其实核心还是深度搜索算法。</p><p>根据该题描述，乘客的航班要求是从JFK出发，把给出的每一个航班，即，每一个数组元素都遍历走一遍。</p><p>比如示例1：</p><p>首先选择JFK，然后JFK可以到达的地方有MUC，且只有MUC，所以选择MUC，接着MUC可以去的地方只有LHR，则选择LHR，以此类推，往后最后得到相应结果。</p><p>注意：题目要求只选择一条通路即可。所以在回溯遍历的终止条件中，我们使用result.size()==航班数+1，则符合我们的通路要求。</p><h3 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// unordered_map&lt;出发机场, map&lt;到达机场, 航班次数&gt;&gt; targets</span></span><br><span class="line">unordered_map&lt;string, map&lt;string, <span class="type">int</span>&gt;&gt; targets;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> ticketNum, vector&lt;string&gt;&amp; result)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="built_in">size</span>() == ticketNum + <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (pair&lt;<span class="type">const</span> string, <span class="type">int</span>&gt;&amp; target : targets[result[result.<span class="built_in">size</span>() - <span class="number">1</span>]]) {</span><br><span class="line">        <span class="keyword">if</span> (target.second &gt; <span class="number">0</span> ) { <span class="comment">// 记录到达机场是否飞过了</span></span><br><span class="line">            result.<span class="built_in">push_back</span>(target.first);</span><br><span class="line">            target.second--;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">backtracking</span>(ticketNum, result)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            result.<span class="built_in">pop_back</span>();</span><br><span class="line">            target.second++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findItinerary</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; tickets)</span> </span>{</span><br><span class="line">        targets.<span class="built_in">clear</span>();</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> vector&lt;string&gt;&amp; vec : tickets) {</span><br><span class="line">            targets[vec[<span class="number">0</span>]][vec[<span class="number">1</span>]]++; <span class="comment">// 记录映射关系</span></span><br><span class="line">        }</span><br><span class="line">        result.<span class="built_in">push_back</span>(<span class="string">"JFK"</span>); <span class="comment">// 起始机场</span></span><br><span class="line">        <span class="built_in">backtracking</span>(tickets.<span class="built_in">size</span>(), result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>上述代码分析如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;string, map&lt;string, int&gt;&gt; targets;</span><br></pre></td></tr></tbody></table></figure><p>该map映射主要用来存放对应一个出发地，及其对应的所有目的地的信息及其剩余还可以乘坐的航班次数。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bool backtracking(int ticketNum, vector&lt;string&gt;&amp; result) {</span><br><span class="line">    if (result.size() == ticketNum + 1) {</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">    for (pair&lt;const string, int&gt;&amp; target : targets[result[result.size() - 1]]) {</span><br><span class="line">        if (target.second &gt; 0 ) { // 记录到达机场是否飞过了</span><br><span class="line">            result.push_back(target.first);</span><br><span class="line">            target.second--;</span><br><span class="line">            if (backtracking(ticketNum, result)) return true;</span><br><span class="line">            result.pop_back();</span><br><span class="line">            target.second++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return false;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述为回溯算法主体部分。</p><p>回溯函数的参数为总的航班数目，当前的结果通路result;</p><p>终止条件为航班数+1等于当前result的数目，即可。</p><p>循环体：即对应的回溯遍历树的同树层，判断该航班是否被用完了，然后将当前地点加入result，该航班的num-1，注意要引用，因为这里需要操作targets的数据，如果target不引用targets，那么对应的数据无法改变，在深层递归的时候就会出现错误。然后就是判断当前路径及其子路径是否符合条件，并进行深度搜索，然后回溯，最终继续循环该层的其他航班地点。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; findItinerary(vector&lt;vector&lt;string&gt;&gt;&amp; tickets) {</span><br><span class="line">        targets.clear();</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        for (const vector&lt;string&gt;&amp; vec : tickets) {</span><br><span class="line">            targets[vec[0]][vec[1]]++; // 记录映射关系</span><br><span class="line">        }</span><br><span class="line">        result.push_back("JFK"); // 起始机场</span><br><span class="line">        backtracking(tickets.size(), result);</span><br><span class="line">        return result;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>主函数体，首先将所有票务信息存入targets,然后记录初始机场，进行回溯，得到答案。</p><p>上述就是该题的所有思路及其相关题解代码分析。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.19</title>
      <link href="/2024/06/19/6-19/"/>
      <url>/2024/06/19/6-19/</url>
      
        <content type="html"><![CDATA[<p>今日，主要实现了从github pages服务的使用，到hexo博客的简单搭建。总体上简单实现了很多功能，后续还需要继续不断完善。</p><img src="/2024/06/19/6-19/1000.jfif" class="" title="图片引用方法一">]]></content>
      
      
      
        <tags>
            
            <tag> 6.19日初次搭建博客实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/2024/06/19/test1/"/>
      <url>/2024/06/19/test1/</url>
      
        <content type="html"><![CDATA[<p>来测试一下吧。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% asset_img example.jpg This is an example image %}</span><br></pre></td></tr></tbody></table></figure><hr><p>这是一篇测试文章</p><img src="/2024/06/19/test1/test.png" class="" title="图片引用方法一"><p><img src="/test.png" alt="图片引用方法二"></p><p><img src="/images/test.png" alt="图片引用方法三"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 新建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/19/hello-world/"/>
      <url>/2024/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
